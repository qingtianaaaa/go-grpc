// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.5.1
// source: search_stream.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_GetUserInfo_FullMethodName = "/proto.UserService/GetUserInfo"
	UserService_AddUser_FullMethodName     = "/proto.UserService/AddUser"
	UserService_UpdateUser_FullMethodName  = "/proto.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName  = "/proto.UserService/DeleteUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetUserRequest, GetUserResponse], error)
	AddUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddUserRequest, AddUserResponse], error)
	UpdateUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateUserRequest, UpdateUserResponse], error)
	DeleteUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteUserRequest, DeleteUserResponse], error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetUserRequest, GetUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_GetUserInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserRequest, GetUserResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GetUserInfoClient = grpc.BidiStreamingClient[GetUserRequest, GetUserResponse]

func (c *userServiceClient) AddUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddUserRequest, AddUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_AddUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddUserRequest, AddUserResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserClient = grpc.BidiStreamingClient[AddUserRequest, AddUserResponse]

func (c *userServiceClient) UpdateUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateUserRequest, UpdateUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_UpdateUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateUserRequest, UpdateUserResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_UpdateUserClient = grpc.BidiStreamingClient[UpdateUserRequest, UpdateUserResponse]

func (c *userServiceClient) DeleteUser(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteUserRequest, DeleteUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], UserService_DeleteUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeleteUserRequest, DeleteUserResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_DeleteUserClient = grpc.BidiStreamingClient[DeleteUserRequest, DeleteUserResponse]

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	GetUserInfo(grpc.BidiStreamingServer[GetUserRequest, GetUserResponse]) error
	AddUser(grpc.BidiStreamingServer[AddUserRequest, AddUserResponse]) error
	UpdateUser(grpc.BidiStreamingServer[UpdateUserRequest, UpdateUserResponse]) error
	DeleteUser(grpc.BidiStreamingServer[DeleteUserRequest, DeleteUserResponse]) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) GetUserInfo(grpc.BidiStreamingServer[GetUserRequest, GetUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) AddUser(grpc.BidiStreamingServer[AddUserRequest, AddUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(grpc.BidiStreamingServer[UpdateUserRequest, UpdateUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(grpc.BidiStreamingServer[DeleteUserRequest, DeleteUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfo(&grpc.GenericServerStream[GetUserRequest, GetUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_GetUserInfoServer = grpc.BidiStreamingServer[GetUserRequest, GetUserResponse]

func _UserService_AddUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUser(&grpc.GenericServerStream[AddUserRequest, AddUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserServer = grpc.BidiStreamingServer[AddUserRequest, AddUserResponse]

func _UserService_UpdateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).UpdateUser(&grpc.GenericServerStream[UpdateUserRequest, UpdateUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_UpdateUserServer = grpc.BidiStreamingServer[UpdateUserRequest, UpdateUserResponse]

func _UserService_DeleteUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).DeleteUser(&grpc.GenericServerStream[DeleteUserRequest, DeleteUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_DeleteUserServer = grpc.BidiStreamingServer[DeleteUserRequest, DeleteUserResponse]

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserInfo",
			Handler:       _UserService_GetUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddUser",
			Handler:       _UserService_AddUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateUser",
			Handler:       _UserService_UpdateUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteUser",
			Handler:       _UserService_DeleteUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "search_stream.proto",
}
